knitr::opts_chunk$set(echo = TRUE)
for (x in c(3, 6, 9)) { print(x)
}
for (x in 1:8) {print(x)}
for (x in 1:8)
{y <- seq(from=100,to=200,by=5) print(y[x])}
for (x in 1:8)
{y <- seq(from=100,to=200,by=5)
print(y[x])}
# 1. determine what to loop over
sample_sizes <- c(5, 10, 15, 20, 25000)
# 2. pre-allocate space to store output sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) { sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
# 1. determine what to loop over
sample_sizes <- c(5, 10, 15, 20, 25000)
# 2. pre-allocate space to store output sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes))
{ sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
# 1. determine what to loop over
sample_sizes <- c(5, 10, 15, 20, 25000)
# 2. pre-allocate space to store output sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
# 1. determine what to loop over
sample_sizes <- c(5, 10, 15, 20, 25000)
# 2. pre-allocate space to store output
sample_means <- double(length(sample_sizes))
for (i in seq_along(sample_sizes)) {
sample_means[i] <- mean(rnorm(sample_sizes[i]))
}
sample_means
# Example 1 for data_type=double
sample_means <- vector("double", length = 5)
# Example 2 for data_type=double
sample_means <- double(5)
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
# Example 1 for data_type=double
sample_means <- vector("double", length = 5)
# Example 2 for data_type=double
sample_means <- double(5)
# Example 3 for data_type=double
sample_means <- rep(0, length(sample_sizes))
data_list <- vector("list", length = 5)
# Example: bad idea!
# Vector with numbers from 7 to 11
a <- 7:11
# Vector with numbers from 8 to 12
b <- 8:12
# Vector of all zeros of length 5
out <- rep(0L, 5)
# Loop along the length of vector a
for (i in seq_along(a)) {
# Each entry of out is the sum of the corres
out[i] <- a[i] + b[i]
}
out
# Taking advantage of vectorization
a <- 7:11
# Vector with numbers from 8 to 12 b <- 8:12
out <- a + b out
# Taking advantage of vectorization
a <- 7:11
# Vector with numbers from 8 to 12 b <- 8:12
out <- a + b
out
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function sample_summary <-
function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out) }
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function sample_summary <-
function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out) }
sample_sizes <- c(5, 10, 15, 20, 25000)
# Create a functional- function inside a function
sample_summary <- function(sample_sizes, fun) {
# Initialise a vector of the same size as sample_sizes
out <- vector("double", length(sample_sizes))
# Run the for loop for as long as the length of sample_sizes
for (i in seq_along(sample_sizes)) {
# Perform operations indicated fun
out[i] <- fun(rnorm(sample_sizes[i]))
}
return(out) }
# Slide 24
#Compute mean
sample_summary(sample_sizes,mean)
# Compute median
sample_summary(sample_sizes,median)
# Compute sd
sample_summary(sample_sizes,sd)
# Right-hand side code: while loop
i <- 1
while (i <= 5) {
# body
print(i)
i <- i + 1 }
